CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
474,"Use of Function with Inconsistent Implementations",Base,Draft,"The code uses a function that has inconsistent implementations across operating systems and versions.","The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases. The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include: Slight differences in the way parameters are interpreted leading to inconsistent results. Some implementations of the function carry significant security risks. The function might not be defined on all platforms. The function might change which return codes it can provide, or change the meaning of its return codes.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Primary::ORDINALITY:Indirect::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Architecture and Design Requirements:DESCRIPTION:Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.::","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Inconsistent Implementations::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::",,"",
475,"Undefined Behavior for Input to API",Base,Incomplete,"The behavior of this function is undefined unless its control parameter is set to a specific value.","",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Undefined Behavior::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"::TYPE:Other:NOTE:The Linux Standard Base Specification 2.0.1 for libc places constraints on the arguments to some internal functions [21]. If the constraints are not met, the behavior of the functions is not defined. It is unusual for this function to be called directly. It is almost always invoked through a macro defined in a system header file, and the macro ensures that the following constraints are met: The value 1 must be passed to the third parameter (the version number) of the following file system function: __xmknod The value 2 must be passed to the third parameter (the group argument) of the following wide character string functions: __wcstod_internal __wcstof_internal __wcstol_internal __wcstold_internal __wcstoul_internal The value 3 must be passed as the first parameter (the version number) of the following file system functions: __xstat __lxstat __fxstat __xstat64 __lxstat64 __fxstat64::",
477,"Use of Obsolete Function",Base,Draft,"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.","As programming languages evolve, functions occasionally become obsolete due to: Advances in the language Improved understanding of how operations should be performed effectively and securely Changes in the conventions that govern certain operations Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation::","::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.::PHASE:Requirements:DESCRIPTION:Consider seriously the security implications of using an obsolete function. Consider using alternate functions.::","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Obsolete::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:DCL30-PL:ENTRY NAME:Do not import deprecated modules:MAPPING FIT:CWE More Specific::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP30-PL:ENTRY NAME:Do not use deprecated or obsolete functions or modules:MAPPING FIT:CWE More Specific::",,"",
483,"Incorrect Block Delimitation",Base,Draft,"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.","In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.",::NATURE:ChildOf:CWE ID:670:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Primary::ORDINALITY:Indirect::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Alter Execution Logic:NOTE:This is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed.::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Always use explicit block delimitation and use static-analysis technologies to enforce this practice.::","::REFERENCE:CVE-2014-1266:DESCRIPTION:incorrect indentation of goto statement makes it more difficult to detect an incorrect goto (Apple's goto fail):LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Incorrect block delimitation::",,"",
484,"Omitted Break Statement in Switch",Base,Draft,"The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.","This can lead to critical code executing in situations where it should not.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:670:VIEW ID:1000::,"::ORDINALITY:Primary::ORDINALITY:Indirect::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Alter Execution Logic:NOTE:This weakness can cause unintended logic to be executed and other unexpected application behavior.::","::METHOD:White Box:DESCRIPTION:Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected product behavior is required to interpret whether the code is correct.::METHOD:Black Box:DESCRIPTION:Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.::PHASE:Implementation:DESCRIPTION:The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Omitted break statement::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP4:ENTRY NAME:Unchecked Status Condition::",,"",
489,"Active Debug Code",Base,Draft,"The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.","A common development practice is to add back door code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:215:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,"","::TERM:Leftover debug code:DESCRIPTION:This term originates from Seven Pernicious Kingdoms::","::PHASE:Implementation:NOTE:In web-based applications, debug code is used to test and modify web application properties, configuration information, and functions. If a debug application is left on a production server, this oversight during the software process allows attackers access to debug functionality.::PHASE:Build and Compilation::PHASE:Operation::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Other:IMPACT:Bypass Protection Mechanism:IMPACT:Read Application Data:IMPACT:Gain Privileges or Assume Identity:IMPACT:Varies by Context:NOTE:The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Build and Compilation Distribution:DESCRIPTION:Remove debug code before deploying the application.::","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Leftover Debug Code::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::",::121::661::,"::TYPE:Other:NOTE:In J2EE a main method may be a good indicator that debug code has been left in the application, although there may not be any direct security impact.::",
546,"Suspicious Comment",Variant,Draft,"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.","Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:NOTE:Suspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.::","","::PHASE:Documentation:DESCRIPTION:Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.::","",,,"",,"",
547,"Use of Hard-coded, Security-relevant Constants",Base,Draft,"The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.","If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Quality Degradation:NOTE:The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Avoid using hard-coded constants. Configuration files offer a more flexible solution.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:DCL06-C:ENTRY NAME:Use meaningful symbolic constants to represent literal values in program logic::",,"",
554,"ASP.NET Misconfiguration: Not Using Input Validation Framework",Variant,Draft,"The ASP.NET application does not use an input validation framework.","",::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Unexpected State:NOTE:Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.::","","::PHASE:Architecture and Design:DESCRIPTION:Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only T or F Free-form strings are of a reasonable length and composition::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::",,"",
561,"Dead Code",Base,Draft,"The product contains dead code, which can never be executed.","Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:NOTE:Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.::SCOPE:Other:IMPACT:Reduce Maintainability::","::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Cost effective for partial coverage: Warning Flags Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Remove dead code before deploying the application.::PHASE:Testing:DESCRIPTION:Use a static analysis tool to spot dead code.::","::REFERENCE:CVE-2014-1266:DESCRIPTION:chain: incorrect goto in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple goto fail bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).:LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC07-C:ENTRY NAME:Detect and remove dead code::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:MSC00-PL:ENTRY NAME:Detect and remove dead code:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP2:ENTRY NAME:Unused Entities::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-20::",,"",
562,"Return of Stack Variable Address",Base,Draft,"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.","Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:672:VIEW ID:1000::NATURE:CanPrecede:CWE ID:825:VIEW ID:1000::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Availability:SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:NOTE:If the returned stack buffer address is dereferenced after the return, then an attacker may be able to modify or read memory, depending on how the address is used. If the address is used for reading, then the address itself may be exposed, or the contents that the address points to. If the address is used for writing, this can lead to a crash and possibly code execution.::","::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Testing:DESCRIPTION:Use static analysis tools to spot return of the address of a stack variable.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:DCL30-C:ENTRY NAME:Declare objects with appropriate storage durations:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS34-C:ENTRY NAME:Do not call putenv() with a pointer to an automatic variable as the argument::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"",
563,"Assignment to Variable without Use",Base,Draft,"The variable's value is assigned but never used, making it a dead store.","After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","::TERM:Unused Variable::","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context:NOTE:This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Remove unused variables from the code.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC00-C:ENTRY NAME:Compile cleanly at high warning levels::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:MSC01-PL:ENTRY NAME:Detect and remove unused variables:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP2:ENTRY NAME:Unused Entities::",,"",
585,"Empty Synchronized Block",Variant,Draft,"The product contains an empty synchronized block.","An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.",::NATURE:ChildOf:CWE ID:1071:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Other:NOTE:An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP21:ENTRY NAME:Multiple locks/unlocks::",,"",
587,"Assignment of a Fixed Address to a Pointer",Variant,Draft,"The product sets a pointer to a specific address other than NULL or 0.","Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.",::NATURE:ChildOf:CWE ID:344:VIEW ID:1000::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Assembly:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:If one executes code at a known location, an attacker might be able to inject code there beforehand.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Reduce Maintainability:IMPACT:Reduce Reliability:NOTE:If the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash.::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Modify Memory:NOTE:The data at a known pointer location can be easily read or influenced by an attacker.::","","::PHASE:Implementation:DESCRIPTION:Never set a pointer to a fixed address.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT36-C:ENTRY NAME:Converting a pointer to integer or integer to pointer:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"",
589,"Call to Non-ubiquitous API",Variant,Incomplete,"The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.","Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.",::NATURE:ChildOf:CWE ID:474:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Always test your code on any platform on which it is targeted to run on.::PHASE:Testing:DESCRIPTION:Test your code on the newest and oldest platform on which it is targeted to run on.::PHASE:Testing:DESCRIPTION:Develop a system to test for API functions that are not portable.::","",,,"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MET02-J:ENTRY NAME:Do not use deprecated or obsolete classes or methods::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SER00-J:ENTRY NAME:Maintain serialization compatibility during class evolution::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::",::96::,"",
594,"J2EE Framework: Saving Unserializable Objects to Disk",Variant,Incomplete,"When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.","In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Data represented by unserializable objects can be corrupted.::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:Non-serializability of objects can lead to system crash.::","","::PHASE:Architecture and Design Implementation:DESCRIPTION:All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"",
676,"Use of Potentially Dangerous Function",Base,Draft,"The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.","",::NATURE:ChildOf:CWE ID:1177:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Primary::ORDINALITY:Indirect::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Quality Degradation:IMPACT:Unexpected State:NOTE:If the function is used incorrectly, then it could result in security problems.::","::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger Cost effective for partial coverage: Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious:EFFECTIVENESS:High::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags Source Code Quality Analyzer:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Origin Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::","::PHASE:Build and Compilation Implementation:DESCRIPTION:Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the banned.h include file from Microsoft's SDL. [REF-554] [REF-7]::","::REFERENCE:CVE-2007-1470:DESCRIPTION:Library has multiple buffer overflows using sprintf() and strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2007-1470::REFERENCE:CVE-2009-3849:DESCRIPTION:Buffer overflow using strcat():LINK:https://www.cve.org/CVERecord?id=CVE-2009-3849::REFERENCE:CVE-2006-2114:DESCRIPTION:Buffer overflow using strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2006-2114::REFERENCE:CVE-2006-0963:DESCRIPTION:Buffer overflow using strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2006-0963::REFERENCE:CVE-2011-0712:DESCRIPTION:Vulnerable use of strcpy() changed to use safer strlcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2011-0712::REFERENCE:CVE-2008-5005:DESCRIPTION:Buffer overflow using strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2008-5005::",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Dangerous Functions::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:CON33-C:ENTRY NAME:Avoid race conditions when using library functions:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV33-C:ENTRY NAME:Do not call system():MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR07-C:ENTRY NAME:Prefer functions that support error checking over equivalent functions that don't::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR34-C:ENTRY NAME:Detect errors when converting a string to a number:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO01-C:ENTRY NAME:Be careful using functions that use file names for identification::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC30-C:ENTRY NAME:Do not use the rand() function for generating pseudorandom numbers:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR31-C:ENTRY NAME:Guarantee that storage for strings has sufficient space for character data and the null terminator:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::",,"::TYPE:Relationship:NOTE:This weakness is different than CWE-242 (Use of Inherently Dangerous Function). CWE-242 covers functions with such significant security problems that they can never be guaranteed to be safe. Some functions, if used properly, do not directly pose a security risk, but can introduce a weakness if not called correctly. These are regarded as potentially dangerous. A well-known example is the strcpy() function. When provided with a destination buffer that is larger than its source, strcpy() will not overflow. However, it is so often misused that some developers prohibit strcpy() entirely.::",
684,"Incorrect Provision of Specified Functionality",Class,Draft,"The code does not function according to its published specifications, potentially leading to incorrect usage.","When providing functionality to an external party, it is important that the product behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation::","","::PHASE:Implementation:DESCRIPTION:Ensure that your code strictly conforms to specifications.::","::REFERENCE:CVE-2002-1446:DESCRIPTION:Error checking routine in PKCS#11 library returns OK status even when invalid signature is detected, allowing spoofed messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1446::REFERENCE:CVE-2001-1559:DESCRIPTION:Chain: System call returns wrong value (CWE-393), leading to a resultant NULL dereference (CWE-476).:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1559::REFERENCE:CVE-2003-0187:DESCRIPTION:Program uses large timeouts on unconfirmed connections resulting from inconsistency in linked lists implementations.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0187::REFERENCE:CVE-1999-1446:DESCRIPTION:UI inconsistency; visited URLs list not cleared when Clear History option is selected.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1446::",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:PRE09-C:ENTRY NAME:Do not replace secure functions with less secure functions::",,"",
758,"Reliance on Undefined, Unspecified, or Implementation-Defined Behavior",Class,Incomplete,"The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.","This can lead to resultant weaknesses when the required properties change, such as when the product is ported to a different platform or if an interaction error (CWE-435) occurs.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",,"","","","",,"::SCOPE:Other:IMPACT:Other::","::METHOD:Fuzzing:DESCRIPTION:Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.:EFFECTIVENESS:High::","","::REFERENCE:CVE-2006-1902:DESCRIPTION:Change in C compiler behavior causes resultant buffer overflows in programs that depend on behaviors that were undefined in the C standard.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-1902::",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR32-C:ENTRY NAME:Ensure size arguments for variable length arrays are in a valid range:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR34-C:ENTRY NAME:Detect errors when converting a string to a number:MAPPING FIT:Imprecise::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP30-C:ENTRY NAME:Do not depend on the order of evaluation for side effects:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP33-C:ENTRY NAME:Do not read uninitialized memory:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO46-C:ENTRY NAME:Do not access a closed file:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT34-C:ENTRY NAME:Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:INT36-C:ENTRY NAME:Converting a pointer to integer or integer to pointer:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM30-C:ENTRY NAME:Do not access freed memory:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC14-C:ENTRY NAME:Do not introduce unnecessary platform dependencies::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC15-C:ENTRY NAME:Do not depend on undefined behavior::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC37-C:ENTRY NAME:Ensure that control never reaches the end of a non-void function:MAPPING FIT:CWE More Abstract::",,"",
766,"Critical Data Element Declared Public",Base,Incomplete,"The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:732:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000::,"::ORDINALITY:Primary::ORDINALITY:Indirect::",::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Modify Application Data:NOTE:Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.::SCOPE:Other:IMPACT:Reduce Maintainability::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.::","::REFERENCE:CVE-2010-3860:DESCRIPTION:variables declared public allow remote read of system properties such as user name and home directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3860::",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Failure to protect stored data from modification::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:OBJ01-J:ENTRY NAME:Declare data members as private and provide accessible wrapper methods::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-15::",,"",
1041,"Use of Redundant Code",Base,Incomplete,"The product has multiple functions, methods, procedures, macros, etc. that contain the same code.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","::PHASE:Implementation:DESCRIPTION:Merge common functionality into a single function and then call that function from across the entire code base.::","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-19::",,"",
1042,"Static Member Data Element outside of a Singleton Class Element",Variant,Incomplete,"The code contains a member element that is declared as static (but not final), in which its parent class element is not a singleton class - that is, a class element that can be used only once in the 'to' association of a Create action.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-3::",,"",
1043,"Data Element Aggregating an Excessively Large Number of Non-Primitive Elements",Base,Incomplete,"The product uses a data element that has an excessively large number of sub-elements with non-primitive data types such as structures or aggregated objects.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of excessively large may vary for each product or developer, CISQ recommends a default of 5 sub-elements.",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-12::",,"",
1044,"Architecture with Number of Horizontal Layers Outside of Expected Range",Base,Incomplete,"The product's architecture contains too many - or too few - horizontal layers.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of expected range may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","::PHASE:Architecture and Design::","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-9::",,"",
1045,"Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor",Base,Incomplete,"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.","This issue can prevent the product from running reliably, since the child might not perform essential destruction operations. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-17::",,"",
1046,"Creation of Immutable Text Using String Concatenation",Base,Incomplete,"The product creates an immutable text string using string concatenation operations.","When building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem.",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-2::",,"",
1047,"Modules with Circular Dependencies",Base,Incomplete,"The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.","As an example, with Java, this weakness might indicate cycles between packages. This issue makes it more difficult to maintain the product due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-7::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-13::",,"",
1048,"Invokable Control Element with Large Number of Outward Calls",Base,Incomplete,"The code contains callable control elements that contain an excessively large number of references to other application objects external to the context of the callable, i.e. a Fan-Out value that is excessively large.","While the interpretation of excessively large Fan-Out value may vary for each product or developer, CISQ recommends a default of 5 referenced objects. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-4::",,"",
1049,"Excessive Data Query Operations in a Large Data Table",Base,Incomplete,"The product performs a data query with a large number of joins and sub-queries on a large data table.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and large number of joins or sub-queries may vary for each product or developer, CISQ recommends a default of 1 million rows for a large data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-4::",,"",
1050,"Excessive Platform Resource Consumption within a Loop",Base,Incomplete,"The product has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors.","This issue can make the product perform more slowly. If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-8::",,"",
1051,"Initialization with Hard-Coded Network Resource Configuration Data",Base,Incomplete,"The product initializes data using hard-coded values that act as network resource identifiers.","This issue can prevent the product from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1419:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-18::",,"",
1052,"Excessive Use of Hard-Coded Literals in Initialization",Base,Incomplete,"The product initializes a data element using a hard-coded literal that is not a simple integer or static constant element.","This issue makes it more difficult to modify or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1419:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-3::",,"",
1053,"Missing Documentation for Design",Base,Incomplete,"The product does not have documentation that represents how it is designed.","This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1054,"Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer",Base,Incomplete,"The code at one architectural layer invokes code that resides at a deeper layer than the adjacent layer, i.e., the invocation skips at least one layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.","This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-12::",,"",
1055,"Multiple Inheritance from Concrete Classes",Base,Incomplete,"The product contains a class with inheritance from more than one concrete class.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-2::",,"",
1056,"Invokable Control Element with Variadic Parameters",Base,Incomplete,"A named-callable or method control element has a signature that supports a variable (variadic) number of parameters or arguments.","This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-8::",,"",
1057,"Data Access Operations Outside of Expected Data Manager Component",Base,Incomplete,"The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.","This issue can make the product perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-11::",,"",
1058,"Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",Base,Incomplete,"The code contains a function or method that operates in a multi-threaded environment but owns an unsafe non-final static storable or member data element.","This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:662:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-11::",,"",
1059,"Insufficient Technical Documentation",Class,Incomplete,"The product does not contain sufficient technical or engineering documentation (whether on paper or in electronic form) that contains descriptions of all the relevant software/hardware elements of the product, such as its usage, structure, architectural components, interfaces, design, implementation, configuration, operation, etc.","When technical documentation is limited or lacking, products are more difficult to maintain. This indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. When using time-limited or labor-limited third-party/in-house security consulting services (such as threat modeling, vulnerability discovery, or pentesting), insufficient documentation can force those consultants to invest unnecessary time in learning how the product is organized, instead of focusing their expertise on finding the flaws or suggesting effective mitigations. With respect to hardware design, the lack of a formal, final manufacturer reference can make it difficult or impossible to evaluate the final product, including post-manufacture verification. One cannot ensure that design functionality or operation is within acceptable tolerances, conforms to specifications, and is free from unexpected behavior. Hardware-related documentation may include engineering artifacts such as hardware description language (HDLs), netlists, Gerber files, Bills of Materials, EDA (Electronic Design Automation) tool files, etc.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Documentation::","",,"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Hide Activities:IMPACT:Reduce Reliability:IMPACT:Quality Degradation:IMPACT:Reduce Maintainability:NOTE:Without a method of verification, one cannot be sure that everything only functions as expected.::","","::PHASE:Documentation Architecture and Design:DESCRIPTION:Ensure that design documentation is detailed enough to allow for post-manufacturing verification.::","::REFERENCE:CVE-2022-3203:DESCRIPTION:A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).:LINK:https://www.cve.org/CVERecord?id=CVE-2022-3203::",,,"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.02.03 BR::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.02.03 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.03 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-1::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-2::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-3::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-4::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-6::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SG-7::",,"",
1060,"Excessive Number of Inefficient Server-Side Data Accesses",Base,Incomplete,"The product performs too many data queries without using efficient data processing functionality such as stored procedures.","This issue can make the product perform more slowly due to computational expense. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of too many data queries may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-9::",,"",
1061,"Insufficient Encapsulation",Class,Incomplete,"The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","::REFERENCE:CVE-2010-3860:DESCRIPTION:variables declared public allow remote read of system properties such as user name and home directory.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-3860::",,,"",,"",
1062,"Parent Class with References to Child Class",Base,Incomplete,"The code has a parent class that contains references to a child class, its methods, or its members.","This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-14::",,"",
1063,"Creation of Class Instance within a Static Code Block",Base,Incomplete,"A static code block creates an instance of a class.","This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static. This issue can make the product perform more slowly by performing initialization before it is needed. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-1::",,"",
1064,"Invokable Control Element with Signature Containing an Excessive Number of Parameters",Base,Incomplete,"The product contains a function, subroutine, or method whose signature has an unnecessarily large number of parameters/arguments.","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of parameters. may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-13::",,"",
1065,"Runtime Resource Management Control Element in a Component Built to Run on Application Servers",Base,Incomplete,"The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.","This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-5::",,"",
1066,"Missing Serialization Control Element",Base,Incomplete,"The product contains a serializable data element that does not have an associated serialization method.","This issue can prevent the product from running reliably, e.g. by triggering an exception. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-2::",,"",
1067,"Excessive Execution of Sequential Searches of Data Resource",Base,Incomplete,"The product contains a data query against an SQL table or view that is configured in a way that does not utilize an index and may cause sequential searches to be performed.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1176:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-5::",,"",
1068,"Inconsistency Between Implementation and Documented Design",Base,Incomplete,"The implementation of the product is not consistent with the design as described within the relevant documentation.","This issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"","","","",,,"",,"",
1069,"Empty Exception Block",Variant,Incomplete,"An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.","When an exception handling block (such as a Catch and Finally block) is used, but that block is empty, this can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1071:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","::PHASE:Implementation:DESCRIPTION:For every exception block add code that handles the specific exception in the way intended by the application.::","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-1::",,"",
1070,"Serializable Data Element Containing non-Serializable Item Elements",Base,Incomplete,"The product contains a serializable, storable data element such as a field or member, but the data element contains member elements that are not serializable.","This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-3::",,"",
1071,"Empty Code Block",Base,Incomplete,"The source code contains a block that does not contain any code, i.e., the block is empty.","Empty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc. While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc. For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"",,"",
1072,"Data Resource Access without Use of Connection Pooling",Base,Incomplete,"The product accesses a data resource through a database without using a connection pooling capability.","This issue can make the product perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-13::",,"",
1073,"Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",Base,Incomplete,"The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large number of data accesses/queries may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-10::",,"",
1074,"Class with Excessively Deep Inheritance",Base,Incomplete,"A class has an inheritance level that is too high, i.e., it has a large number of parent classes.","This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of parent classes may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-17::",,"",
1075,"Unconditional Control Flow Transfer outside of Switch Block",Base,Incomplete,"The product performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-1::",,"",
1076,"Insufficient Adherence to Expected Conventions",Class,Incomplete,"The product's architecture, source code, design, documentation, or other artifact does not follow required conventions.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1077,"Floating Point Comparison with Incorrect Operator",Variant,Incomplete,"The code performs a comparison such as an equality test between two float (floating point) values, but it uses comparison operators that do not account for the possibility of loss of precision.","Numeric calculation using floating point values can generate imprecise results because of rounding errors. As a result, two different calculations might generate numbers that are mathematically equal, but have slightly different bit representations that do not translate to the same mathematically-equal values. As a result, an equality test or other comparison might produce unexpected results. This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:697:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-9::",,"",
1078,"Inappropriate Source Code Style or Formatting",Class,Incomplete,"The source code does not follow desired style or formatting for indentation, white space, comments, etc.","",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1079,"Parent Class without Virtual Destructor Method",Base,Incomplete,"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.","This issue can prevent the product from running reliably due to undefined or unexpected behaviors. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-16::",,"",
1080,"Source Code File with Excessive Number of Lines of Code",Base,Incomplete,"A source code file has too many lines of code.","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of too many lines of code may vary for each product or developer, CISQ recommends a default threshold value of 1000.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-8::",,"",
1082,"Class Instance Self Destruction Control Element",Base,Incomplete,"The code contains a class instance that calls the method or function to delete or destroy itself.","For example, in C++, delete this will cause the object to delete itself. This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-7::",,"",
1083,"Data Access from Outside Expected Data Manager Component",Base,Incomplete,"The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.","When the product has a data access component, the design may be intended to handle all data access operations through that component. If a data access operation is performed outside of that component, then this may indicate a violation of the intended design. This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-10::",,"",
1084,"Invokable Control Element with Excessive File or Data Access Operations",Base,Incomplete,"A function or method contains too many operations that utilize a data manager or file resource.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of too many operations may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-14::",,"",
1085,"Invokable Control Element with Excessive Volume of Commented-out Code",Base,Incomplete,"A function, method, procedure, etc. contains an excessive amount of code that has been commented out within its body.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of excessive volume may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-6::",,"",
1086,"Class with Excessive Number of Child Classes",Base,Incomplete,"A class contains an unnecessarily large number of children.","This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of children may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-18::",,"",
1087,"Class with Virtual Method without a Virtual Destructor",Base,Incomplete,"A class contains a virtual method, but the method does not have an associated virtual destructor.","This issue can prevent the product from running reliably, e.g. due to undefined behavior. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-15::",,"",
1088,"Synchronous Access of Remote Resource without Timeout",Base,Incomplete,"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.","This issue can prevent the product from running reliably, since an outage for the remote resource can cause the product to hang. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:821:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-19::",,"",
1089,"Large Data Table with Excessive Number of Indices",Base,Incomplete,"The product uses a large data table that contains an excessively large number of indices.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessively large number of indices may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a large table and a default threshold of 3 indices.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-6::",,"",
1090,"Method Containing Access of a Member Element from Another Class",Base,Incomplete,"A method for a class performs an operation that directly accesses a member element from another class.","This issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-16::",,"",
1091,"Use of Object without Invoking Destructor Method",Base,Incomplete,"The product contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method.","This issue can make the product perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:772:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-15::",,"",
1092,"Use of Same Invokable Control Element in Multiple Architectural Layers",Base,Incomplete,"The product uses the same control element across multiple architectural layers.","This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-10::",,"",
1093,"Excessively Complex Data Representation",Class,Incomplete,"The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.","This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"",,"",
1094,"Excessive Index Range Scan for a Data Resource",Base,Incomplete,"The product contains an index range scan for a large data table, but the scan can cover a large number of rows.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessive index range may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-7::",,"",
1095,"Loop Condition Value Update within the Loop",Base,Incomplete,"The product uses a loop with a control flow condition based on a value that is updated within the body of the loop.","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-5::",,"",
1096,"Singleton Class Instance Creation without Proper Locking or Synchronization",Variant,Incomplete,"The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.","This issue can prevent the product from running reliably, e.g. by making the instantiation process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:820:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-12::",,"",
1097,"Persistent Storable Data Element without Associated Comparison Control Element",Base,Incomplete,"The product uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison.","For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined. This issue can prevent the product from running reliably, due to incorrect or unexpected comparison results. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:595:VIEW ID:1305:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-4::",,"",
1098,"Data Element containing Pointer Item without Proper Copy Control Element",Base,Incomplete,"The code contains a data element with a pointer that does not have an associated copy or constructor method.","This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::","","","",,,"::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-6::",,"",
1099,"Inconsistent Naming Conventions for Identifiers",Base,Incomplete,"The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements.","This issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1100,"Insufficient Isolation of System-Dependent Functions",Base,Incomplete,"The product or code does not isolate system-dependent functionality into separate standalone modules.","This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1101,"Reliance on Runtime Component in Generated Code",Base,Incomplete,"The product uses automatically-generated code that cannot be executed without a specific runtime support component.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1102,"Reliance on Machine-Dependent Data Representation",Base,Incomplete,"The code uses a data representation that relies on low-level data representation or constructs that may vary across different processors, physical machines, OSes, or other physical components.","This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1105:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1103,"Use of Platform-Dependent Third Party Components",Base,Incomplete,"The product relies on third-party components that do not provide equivalent functionality across all desirable platforms.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1104,"Use of Unmaintained Third Party Components",Base,Incomplete,"The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer.","Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1357:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1105,"Insufficient Encapsulation of Machine-Dependent Functionality",Base,Incomplete,"The product or code uses machine-dependent functionality, but it does not sufficiently encapsulate or isolate this functionality from the rest of the code.","This issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1106,"Insufficient Use of Symbolic Constants",Base,Incomplete,"The source code uses literal constants that may need to change or evolve over time, instead of using symbolic constants.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1107,"Insufficient Isolation of Symbolic Constant Definitions",Base,Incomplete,"The source code uses symbolic constants, but it does not sufficiently place the definitions of these constants into a more centralized or isolated location.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1108,"Excessive Reliance on Global Variables",Base,Incomplete,"The code is structured in a way that relies too much on using or setting global variables throughout various points in the code, instead of preserving the associated information in a narrower, more local context.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::","","",,,"",,"",
1109,"Use of Same Variable for Multiple Purposes",Base,Incomplete,"The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data.","Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1110,"Incomplete Design Documentation",Base,Incomplete,"The product's design documentation does not adequately describe control flow, data flow, system initialization, relationships between tasks, components, rationales, or other important aspects of the design.","",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,"","","","",,"","","","",,,"",,"",
1111,"Incomplete I/O Documentation",Base,Incomplete,"The product's documentation does not adequately define inputs, outputs, or system/software interfaces.","",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1112,"Incomplete Documentation of Program Execution",Base,Incomplete,"The document does not fully define all mechanisms that are used to control or influence how product-specific programs are executed.","This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1113,"Inappropriate Comment Style",Base,Incomplete,"The source code uses comment styles or formats that are inconsistent or do not follow expected standards for the product.","This issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1114,"Inappropriate Whitespace Style",Base,Incomplete,"The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product.","This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1115,"Source Code Element without Standard Prologue",Base,Incomplete,"The source code contains elements such as source files that do not consistently provide a prologue or header that has been standardized for the project.","The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc. This issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1116,"Inaccurate Comments",Base,Incomplete,"The source code contains comments that do not accurately describe or explain aspects of the portion of the code with which the comment is associated.","When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","::PHASE:Implementation:DESCRIPTION:Verify that each comment accurately reflects what is intended to happen during execution of the code.::","",,,"",,"",
1117,"Callable with Insufficient Behavioral Summary",Base,Incomplete,"The code contains a function or method whose signature and/or associated inline documentation does not sufficiently describe the callable's inputs, outputs, side effects, assumptions, or return codes.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1118,"Insufficient Documentation of Error Handling Techniques",Base,Incomplete,"The documentation does not sufficiently describe the techniques that are used for error handling, exception processing, or similar mechanisms.","Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1119,"Excessive Use of Unconditional Branching",Base,Incomplete,"The code uses too many unconditional branches (such as goto).","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1120,"Excessive Code Complexity",Class,Incomplete,"The code is too complex, as calculated using a well-defined, quantitative measure.","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::SCOPE:Other:IMPACT:Reduce Performance::","","","",,,"",,"",
1121,"Excessive McCabe Cyclomatic Complexity",Base,Incomplete,"The code contains McCabe cyclomatic complexity that exceeds a desirable maximum.","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-11::",,"",
1122,"Excessive Halstead Complexity",Base,Incomplete,"The code is structured in a way that a Halstead complexity measure exceeds a desirable maximum.","A variety of Halstead complexity measures exist, such as program vocabulary size or volume. This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1123,"Excessive Use of Self-Modifying Code",Base,Incomplete,"The product uses too much self-modifying code.","This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1124,"Excessively Deep Nesting",Base,Incomplete,"The code contains a callable or other code grouping in which the nesting / branching is too deep.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1125,"Excessive Attack Surface",Base,Incomplete,"The product has an attack surface whose quantitative measurement exceeds a desirable maximum.","Originating from software security, an attack surface measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"","","","",,,"",,"",
1126,"Declaration of Variable with Unnecessarily Wide Scope",Base,Incomplete,"The source code declares a variable in one scope, but the variable is only used within a narrower scope.","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1127,"Compilation with Insufficient Warnings or Errors",Base,Incomplete,"The code is compiled without sufficient warnings enabled, which may prevent the detection of subtle bugs or quality issues.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","::PHASE:Build and Compilation::","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","",,,"",,"",
1164,"Irrelevant Code",Class,Incomplete,"The product contains code that is not essential for execution, i.e. makes no state changes and has no side effects that alter data or control flow, such that removal of the code would have no impact to functionality or correctness.","Irrelevant code could include dead code, initialization that is not used, empty blocks, code that could be entirely removed due to optimization, etc.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","","",,"::SCOPE:Other:IMPACT:Reduce Reliability::SCOPE:Other:IMPACT:Reduce Performance::","","","::REFERENCE:CVE-2014-1266:DESCRIPTION:chain: incorrect goto in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple goto fail bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).:LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::",,,"",,"",
1173,"Improper Use of Validation Framework",Base,Draft,"The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.","Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design:NOTE:This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.::PHASE:Implementation:NOTE:This weakness may occur when developers do not correctly use a provided input validation framework.::","",,"::SCOPE:Integrity:IMPACT:Unexpected State:NOTE:Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.::","::METHOD:Automated Static Analysis:DESCRIPTION:Some instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.::","::PHASE:Implementation:DESCRIPTION:Properly use provided input validation frameworks.::","",,,"",,"",
1174,"ASP.NET Misconfiguration: Improper Model Validation",Variant,Draft,"The ASP.NET application does not use, or incorrectly uses, the model validation framework.","",::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Unexpected State:NOTE:Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.::","","","",,,"",,"",
1176,"Inefficient CPU Computation",Class,Incomplete,"The product performs CPU computations using algorithms that are not as efficient as they could be for the needs of the developer, i.e., the computations can be optimized further.","This issue can make the product perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Availability:IMPACT:DoS: Resource Consumption (CPU)::SCOPE:Other:IMPACT:Reduce Performance::","","","::REFERENCE:CVE-2022-37734:DESCRIPTION:Chain: lexer in Java-based GraphQL server does not enforce maximum of tokens early enough (CWE-696), allowing excessive CPU consumption (CWE-1176):LINK:https://www.cve.org/CVERecord?id=CVE-2022-37734::",,,"",,"",
1177,"Use of Prohibited Code",Class,Incomplete,"The product uses a function, library, or third party component that has been explicitly prohibited, whether by the developer or the customer.","The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc. To reduce risk of vulnerabilities, the developer might maintain a list of banned functions that programmers must avoid using because the functions are difficult or impossible to use securely. This issue can also make the product more costly and difficult to maintain.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","","::REFERENCE:CVE-2007-1470:DESCRIPTION:Library has multiple buffer overflows using sprintf() and strcpy():LINK:https://www.cve.org/CVERecord?id=CVE-2007-1470::REFERENCE:CVE-2007-4004:DESCRIPTION:FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4004::",,,"",,"",
1357,"Reliance on Insufficiently Trustworthy Component",Class,Incomplete,"The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.","Many modern hardware and software products are built by combining multiple smaller components together into one larger entity, often during the design or architecture phase. For example, a hardware component might be built by a separate supplier, or the product might use an open-source software library from a third party. Regardless of the source, each component should be sufficiently trusted to ensure correct, secure operation of the product. If a component is not trustworthy, it can produce significant risks for the overall product, such as vulnerabilities that cannot be patched fast enough (if at all); hidden functionality such as malware; inability to update or replace the component if needed for security purposes; hardware components built from parts that do not meet specifications in ways that can lead to weaknesses; etc. Note that a component might not be trustworthy even if it is owned by the product vendor, such as a software component whose source code is lost and was built by developers who left the company, or a component that was developed by a separate company that was acquired and brought into the product's own company. Note that there can be disagreement as to whether a component is sufficiently trustworthy, since trust is ultimately subjective. Different stakeholders (e.g., customers, vendors, governments) have various threat models and ways to assess trust, and design/architecture choices might make tradeoffs between security, reliability, safety, privacy, cost, and other characteristics.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,"","","::PHASE:Requirements:NOTE:Requirements might include criteria for which the only available solutions are provided by insufficiently trusted components.::PHASE:Architecture and Design:NOTE:An insufficiently trusted component might be selected because it is less expensive to do in-house, requires expertise that is not available in-house, or might allow the product to reach the market faster.::","",,"::SCOPE:Other:IMPACT:Reduce Maintainability::","","::PHASE:Requirements Architecture and Design Implementation:DESCRIPTION:For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.::PHASE:Architecture and Design Implementation Integration Manufacturing:DESCRIPTION:Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.::PHASE:Operation Patching and Maintenance:DESCRIPTION:Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.::","::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are end-of-support and cannot be patched (CWE-1277). [REF-1097]:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::",,,"::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.02 RE(1)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 2-4:ENTRY NAME:Req SP.03.02 RE(2)::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req EDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req HDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req NDR 3.12::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req EDR 3.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req HDR 3.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req NDR 3.13::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR-7.8::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SM-6::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SM-9::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-1:ENTRY NAME:Req SM-10::",,"::TYPE:Maintenance:NOTE:As of CWE 4.10, the name and description for this entry has undergone significant change and is still under public discussion, especially by members of the HW SIG.::",
